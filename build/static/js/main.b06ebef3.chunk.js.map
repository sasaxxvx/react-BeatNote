{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/PlayList/PlayList.js","Components/PlaylistList/PlaylistList.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","userId","userName","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","PlayList","handleNameChange","checkIfPlaylistTracks","e","onNameChange","playlistTracks","length","playlistName","loading","open","spinnerColor","bgColor","textColor","text","disabled","onSave","Spotify","getCurrentUserId","getAccessToken","headers","Authorization","Promise","resolve","reject","fetch","then","response","json","jsonResponse","getCurrentUserName","display_name","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","items","artists","uri","savePlaylist","trackUris","Error","method","body","JSON","stringify","playlistId","uris","getUserPlaylists","playlist","url","images","byUser","owner","PlaylistList","onShow","playlistList","src","App","user","updatePlaylistName","showPlaylistList","find","savedTrack","push","filter","currentTrack","console","log","resolvedValue","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b06ebef3.chunk.js","sourcesContent":["const clientId = '3c6b1fbc75e34b9a82ee4da61c734df5';\nconst redirectUri = 'http://react-beatnote.surge.sh';\nlet accessToken;\n\nlet userId;\nlet userName;\n\nconst Spotify = {\n\n    getCurrentUserId(){\n        const accessToken = Spotify.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessToken}`\n        }\n        if(userId){\n            const ifUserIdPromise = new Promise((resolve, reject) => {\n                resolve(userId)\n            })\n            // console.log(ifUserIdPromise,'haha')\n            return ifUserIdPromise;\n        // create and return a promise that will resolve to that value.\n\n        }else{\n            return fetch('https://api.spotify.com/v1/me', {headers: headers})\n            .then(response => response.json())\n            .then(jsonResponse => {\n                userId = jsonResponse.id;\n                \n                return userId\n                //userId 就是这个promise的resolved value\n                \n            })\n\n        }\n    },\n\n    getCurrentUserName(){\n        const accessToken = Spotify.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessToken}`\n        }\n        if(userName){\n            const ifUserNamePromise = new Promise((resolve, reject) => {\n                resolve(userName)\n            })\n            return ifUserNamePromise;\n        // create and return a promise that will resolve to that value.\n\n        }else{\n            return fetch('https://api.spotify.com/v1/me', {headers: headers})\n            .then(response => response.json())\n            .then(jsonResponse => {\n                userName = jsonResponse.display_name;\n                \n                return userName\n                //userName 就是这个promise的resolved value\n                \n            })\n\n        }\n       \n    }, \n    \n\n\n\n    getAccessToken() {\n        if (accessToken) {\n\n            return accessToken;\n        }\n\n        //check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            //This clears parameters, allowing us to grab a new access token \n            //when it expires.\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } \n        else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n            {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`\n                }\n            }).then(response => {\n                return response.json();\n            }).then(jsonResponse => {\n                if (!jsonResponse.tracks){\n                    return [];\n                }\n                return jsonResponse.tracks.items.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artists: track.artists[0].name,\n                    album:track.album.name,\n                    uri: track.uri\n                }));\n            });\n\n    },\n\n    savePlaylist(name, trackUris){\n       if(!name || !trackUris.length){\n           return new Error();\n       }\n\n        //create three default variables\n        const accessToken = Spotify.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessToken}`\n        };\n        \n           return Spotify.getCurrentUserId().then(userId => {\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: name})\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris}) \n                })\n                \n            \n            })\n        })\n        \n\n        \n    },\n\n    getUserPlaylists(){\n        const accessToken = Spotify.getAccessToken();\n        return Spotify.getCurrentUserId().then(userId => {\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n            {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`\n                }\n            }).then(response => {\n                return response.json();\n            }).then(jsonResponse => {\n                if (!jsonResponse.items){\n                    return [];\n                }\n                return jsonResponse.items.map(playlist => ({\n                    id: playlist.id,\n                    name: playlist.name,  \n                    uri: playlist.uri,\n                    url: playlist.images[0].url,\n                    byUser: playlist.owner.display_name\n                }))\n            })\n        })\n        \n\n    }\n\n\n}\n\n\n\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\n class SearchBar extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            term: ''\n        }\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n    search(){\n        this.props.onSearch(this.state.term)\n    }\n\n    handleTermChange(event){\n        this.setState({term: event.target.value})\n    }\n    render(){\n    return(\n            <div className='SearchBar'>\n                <input placeholder='Enter A Song, Album, or Artist'\n                        onChange={this.handleTermChange} />\n                <button className=\"SearchButton\"\n                        onClick={this.search}>SEARCH</button>\n            </div>\n            \n      \n\n            \n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props){\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction(){\n        if(this.props.isRemoval){\n            return <button className='Track-action'onClick={this.removeTrack}>-</button>\n        }else {\n          return <button className='Track-action' onClick={this.addTrack}>+</button>  \n        }\n    }\n\n    addTrack(){\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack(){\n        this.props.onRemove(this.props.track);\n    }\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album} </p>\n                </div>\n                {this.renderAction()}\n            </div>\n        )\n    }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track'; \n\nclass TrackList extends React.Component{\n    render(){\n        return (\n            <div className=\"TrackList\">\n                    {\n                    this.props.tracks.map(track=>{\n                        return <Track track={track}\n                                    key={track.id}\n                                    onAdd={this.props.onAdd}\n                                    isRemoval={this.props.isRemoval}\n                                    onRemove={this.props.onRemove}\n                                    />\n                                \n                    })\n                    }\n            </div>\n        )\n    }\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\n\nclass SearchResults extends React.Component{\n    render(){\n        return (\n            <div className='SearchResults'>\n            <h2> Results</h2>\n            <TrackList tracks={this.props.searchResults}\n                        onAdd={this.props.onAdd}\n                        isRemoval={false}/>\n            </div>\n        )\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './PlayList.css';\nimport TrackList from '../TrackList/TrackList';\nimport LoadingScreen from 'react-loading-screen';\n\nclass PlayList extends React.Component{\n    constructor(props){\n        super(props);\n      \n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.checkIfPlaylistTracks = this.checkIfPlaylistTracks.bind(this);\n  \n    }\n\n    \n    \n    handleNameChange(e){\n        this.props.onNameChange(e.target.value);\n    \n    }\n\n    checkIfPlaylistTracks(){\n        if(this.props.playlistTracks.length === 0){\n            return true\n        }else{\n            return false\n        }\n    }\n\n    \n    render(){\n        return (\n            <div className='Playlist'>\n             \n                <input  value={this.props.playlistName}\n                        placeholder='New playlist'\n                        onChange={this.handleNameChange}/>\n                <TrackList tracks={this.props.playlistTracks}\n                            isRemoval={true}\n                            onRemove={this.props.onRemove}/>\n                <LoadingScreen\n                        loading={this.props.open}\n                        spinnerColor='black'\n                        bgColor='transparent'\n                        textColor='#676767'\n                        text='saving'> \n                </LoadingScreen>\n                \n                <button \n                        disabled={this.checkIfPlaylistTracks() || !this.props.playlistName}\n                        className='Playlist-save'\n                        onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n\n            </div>\n        )\n    }\n}\n\nexport default PlayList;","import React from \"react\";\nimport './PlaylistList.css';\n\n\nclass PlaylistList extends React.Component {\n    render() {\n        return (\n            <div className=\"PlaylistList\">\n                \n                <div className=\"PlaylistList_header\">\n                    <h2>Local Playlists</h2>\n                    <button onClick={this.props.onShow}\n                            className=\"showButton\"\n                                    >SHOW PLAYLISTS</button>\n                </div>\n\n                <div className=\"PlaylistList-body\">\n\n\n\n                    {this.props.playlistList.map(playlist => {\n                        return (\n                            <div key={playlist.id}\n                                className=\"eachPlaylist\">\n                                <img src={playlist.url} className=\"playlistImg\" />\n\n                                <div className=\"playlistText\">\n                                    <h3>{playlist.name}</h3>\n                                    <p className=\"userName\">by {playlist.byUser}</p>\n                                </div>\n                            </div>\n                        )\n                    })}\n                </div>\n\n\n\n            </div>\n        )\n    }\n}\n\nexport default PlaylistList;","import React, {useEffect}from 'react'; \nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport PlayList from '../PlayList/PlayList';\nimport Spotify from '../../util/Spotify'\nimport PlaylistList from '../PlaylistList/PlaylistList';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      open: null,\n\n      searchResults:[],\n\n      playlistName: '',\n     \n      playlistTracks: [],\n\n      playlistList:[],\n\n      user: null\n      \n      };\n\n      this.addTrack = this.addTrack.bind(this);\n      this.removeTrack = this.removeTrack.bind(this);\n      this.updatePlaylistName = this.updatePlaylistName.bind(this);\n      this.savePlaylist = this.savePlaylist.bind(this);\n      this.search = this.search.bind(this);\n      this.showPlaylistList = this.showPlaylistList.bind(this);\n  }\n \n  addTrack(track){\n\n    let tracks = this.state.playlistTracks;\n    if(tracks.find(savedTrack => savedTrack.id === track.id)){\n      return;\n    }else{\n      tracks.push(track);\n      this.setState({playlistTracks: tracks});\n    }\n  }\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    //我的写法：\n    // let location = tracks.indexOf(track);\n    // tracks.splice(location, 1)\n    // this.setState({playlistTracks: tracks});\n    //官方写法：\n    tracks=tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({playlistTracks:tracks});\n  }\n\n  updatePlaylistName(name){\n      this.setState({playlistName: name});\n  }\n\n  search(term){\n    Spotify.getCurrentUserName().then(userName=>{\n      console.log(userName)\n      this.setState({\n        user: userName\n      })\n    })\n    \n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    });\n    \n  }\n\n  checkIfGotUserId(){\n    Spotify.getCurrentUserId().then( userId =>\n      this.setState({\n      user: userId\n    }))\n    \n  }\n\n\n  savePlaylist(){\n    this.setState({open: true});\n    \n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(()=>{\n      this.setState({\n        \n        playlistName: '',\n        playlistTracks: [],\n        open: false\n      });\n\n      this.showPlaylistList();\n      \n      \n    })\n  }\n\n  showPlaylistList(){\n    Spotify.getUserPlaylists().then(resolvedValue=>{\n      // console.log(resolvedValue);\n      this.setState({playlistList: resolvedValue})\n  })\n}\n\n\n     \n    \n    \n  \n  \n  render() {\n    return (\n      <div>\n        <h1>BeatNote</h1>\n      \n      \n        \n   \n        <div className=\"App\">  \n        {this.state.user && (\n        <h4 className=\"greeting\">Hi, {this.state.user}</h4>\n          )}\n          <SearchBar onSearch={this.search}/>    \n          <div className=\"App-playlist-playlistList\">\n            <SearchResults  searchResults={this.state.searchResults}\n                            onAdd={this.addTrack}/>\n            <PlayList \n                      playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist}\n                      open={this.state.open}/>  \n\n            <PlaylistList  \n                      onShow={this.showPlaylistList}\n                      playlistList={this.state.playlistList}/> \n          </div>\n          \n          \n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}